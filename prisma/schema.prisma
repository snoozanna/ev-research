generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model Performance {
  id       String            @id @default(cuid())
  name     String
  location String
  artistId String?
  artist   User?             @relation(fields: [artistId], references: [id])
  dates    PerformanceDate[]
  posts    Post[]
  imageUrl  String? 
  prompts  Prompt[]
}

model PerformanceDate {
  id            String      @id @default(cuid())
  dateTime      DateTime
  performanceId String
  performance   Performance @relation(fields: [performanceId], references: [id])
  posts         Post[]
}

model Post {
  id                String           @id @default(cuid())
  title             String
  content           String?
  voiceNoteUrl      String?          @map("voice_note_url")
  published         Boolean          @default(false)
  authorId          String?
  performanceDateId String?
  performanceId     String?
  customName        String?
  customLocation    String?
  customDate        DateTime?
  createdAt         DateTime         @default(now())
  shareWithArtist   Boolean          @default(false)
  colourRating      Int              @default(3)
  author            User?            @relation(fields: [authorId], references: [id])
  performanceDate   PerformanceDate? @relation(fields: [performanceDateId], references: [id])
  performance       Performance?     @relation(fields: [performanceId], references: [id])
  promptAnswers     PromptAnswer[]
}


model Prompt {
  id            String         @id @default(cuid())
  text          String
  performanceId String
  performance   Performance    @relation(fields: [performanceId], references: [id])
  answers       PromptAnswer[]
}

model PromptAnswer {
  id       String @id @default(cuid())
  text     String
  postId   String
  promptId String
  post     Post   @relation(fields: [postId], references: [id])
  prompt   Prompt @relation(fields: [promptId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          Role          @default(ATTENDEE)
  clerkId       String   @unique    
  accounts      Account[]
  performances  Performance[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ARTIST
  ATTENDEE
  ADMIN
}
